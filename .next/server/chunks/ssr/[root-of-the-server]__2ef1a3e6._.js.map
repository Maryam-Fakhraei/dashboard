{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///home/myam/project-SCDP/learn-next/fullstack-next/auth.config.ts"],"sourcesContent":["import type { NextAuthConfig } from 'next-auth';\n \nexport const authConfig = {\n  pages: {\n    signIn: '/login',\n  },\n  callbacks: {\n    authorized({ auth, request: { nextUrl } }) {\n      const isLoggedIn = !!auth?.user;\n      const isOnDashboard = nextUrl.pathname.startsWith('/dashboard');\n      if (isOnDashboard) {\n        if (isLoggedIn) return true;\n        return false; // Redirect unauthenticated users to login page\n      } else if (isLoggedIn) {\n        return Response.redirect(new URL('/dashboard', nextUrl));\n      }\n      return true;\n    },\n  },\n  providers: [], // Add providers with an empty array for now\n} satisfies NextAuthConfig;"],"names":[],"mappings":";;;AAEO,MAAM,aAAa;IACxB,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,YAAW,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE;YACvC,MAAM,aAAa,CAAC,CAAC,MAAM;YAC3B,MAAM,gBAAgB,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAClD,IAAI,eAAe;gBACjB,IAAI,YAAY,OAAO;gBACvB,OAAO,OAAO,+CAA+C;YAC/D,OAAO,IAAI,YAAY;gBACrB,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,cAAc;YACjD;YACA,OAAO;QACT;IACF;IACA,WAAW,EAAE;AACf","debugId":null}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///home/myam/project-SCDP/learn-next/fullstack-next/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport { authConfig } from \"./auth.config\";\n\nimport Credentials from \"next-auth/providers/credentials\";\n// Because we want the user to log in with a username and password, not providers like Google.\n\nimport { z } from \"zod\";\n// We use zod to validate the email and password before checking if the user exists in the database.\n\nimport type { User } from \"@/app/lib/definitions\";\nimport bcrypt from \"bcrypt\";\nimport postgres from \"postgres\";\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: \"require\" });\n\nasync function getUser(email: string): Promise<User | undefined> {\n  try {\n    const user = await sql<User[]>`SELECT * FROM users WHERE email=${email}`;\n    return user[0];\n  } catch (error) {\n    console.error(\"Failed to fetch user:\", error);\n    throw new Error(\"Failed to fetch user.\");\n  }\n}\n\nexport const { auth, signIn, signOut } = NextAuth({\n  ...authConfig,\n  providers: [\n    Credentials({\n      async authorize(credentials) {\n        const parsedCredentials = z\n          .object({ email: z.string().email(), password: z.string().min(6) })\n          .safeParse(credentials);\n\n        if (parsedCredentials.success) {\n          const { email, password } = parsedCredentials.data;\n          const user = await getUser(email);\n          if (!user) return null;\n          const passwordsMatch = await bcrypt.compare(password, user.password);\n\n          if (passwordsMatch) return user;\n        }\n        console.log(\"Invalid credentials\");\n        return null;\n      },\n    }),\n  ],\n});\n"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;AAEA;AAAA;AACA,8FAA8F;AAE9F;AAAA;AAIA;AACA;;;;;;;AAEA,MAAM,MAAM,IAAA,wMAAQ,EAAC,QAAQ,GAAG,CAAC,YAAY,EAAG;IAAE,KAAK;AAAU;AAEjE,eAAe,QAAQ,KAAa;IAClC,IAAI;QACF,MAAM,OAAO,MAAM,GAAW,CAAC,gCAAgC,EAAE,MAAM,CAAC;QACxE,OAAO,IAAI,CAAC,EAAE;IAChB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,IAAA,mXAAQ,EAAC;IAChD,GAAG,4HAAU;IACb,WAAW;QACT,IAAA,iOAAW,EAAC;YACV,MAAM,WAAU,WAAW;gBACzB,MAAM,oBAAoB,wOAAC,CACxB,MAAM,CAAC;oBAAE,OAAO,wOAAC,CAAC,MAAM,GAAG,KAAK;oBAAI,UAAU,wOAAC,CAAC,MAAM,GAAG,GAAG,CAAC;gBAAG,GAChE,SAAS,CAAC;gBAEb,IAAI,kBAAkB,OAAO,EAAE;oBAC7B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,kBAAkB,IAAI;oBAClD,MAAM,OAAO,MAAM,QAAQ;oBAC3B,IAAI,CAAC,MAAM,OAAO;oBAClB,MAAM,iBAAiB,MAAM,gHAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;oBAEnE,IAAI,gBAAgB,OAAO;gBAC7B;gBACA,QAAQ,GAAG,CAAC;gBACZ,OAAO;YACT;QACF;KACD;AACH","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///home/myam/project-SCDP/learn-next/fullstack-next/app/lib/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { z } from \"zod\";\nimport { revalidatePath } from \"next/cache\";\nimport { redirect } from \"next/navigation\";\nimport postgres from \"postgres\";\n\nimport { signIn } from \"@/auth\";\nimport { AuthError } from \"next-auth\";\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: \"require\" });\n\nconst FormSchema = z.object({\n  id: z.string({\n    invalid_type_error: \"Please select a customer.\",\n  }),\n  customerId: z.string(),\n  amount: z.coerce\n    .number()\n    .gt(0, { message: \"Please enter an amount greater than $0.\" }),\n  status: z.enum([\"pending\", \"paid\"], {\n    invalid_type_error: \"Please select an invoice status.\",\n  }),\n  date: z.string(),\n});\n\nexport type State = {\n  errors?: {\n    customerId?: string[];\n    amount?: string[];\n    status?: string[];\n  };\n  message?: string | null;\n};\n\nconst CreateInvoice = FormSchema.omit({ id: true, date: true });\n\nexport async function createInvoice(prevState: State, formData: FormData) {\n  // const rawFormData = {\n  //   customerId: formData.get(\"customerId\"),\n  //   amount: formData.get(\"amount\"),\n  //   status: formData.get(\"status\"),\n  // };\n  // console.log(rawFormData);\n  // console.log(typeof rawFormData.amount);\n\n  const validatedFields = CreateInvoice.safeParse({\n    customerId: formData.get(\"customerId\"),\n    amount: formData.get(\"amount\"),\n    status: formData.get(\"status\"),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: \"Missing Fields. Failed to Create Invoice.\",\n    };\n  }\n  const { customerId, amount, status } = validatedFields.data;\n\n  // const { customerId, amount, status } = CreateInvoice.parse({\n  //   customerId: formData.get(\"customerId\"),\n  //   amount: formData.get(\"amount\"),\n  //   status: formData.get(\"status\"),\n  // });\n\n  const amountInCents = amount * 100; // Convert money to cents\n  const date = new Date().toISOString().split(\"T\")[0]; // YYYY-MM-DD\n\n  try {\n    await sql`\n      INSERT INTO invoices (customer_id, amount, status, date)\n      VALUES (${customerId}, ${amountInCents}, ${status}, ${date})\n    `;\n  } catch (error) {\n    // console.error(error);\n    return {\n      message: \"Database Error: Failed to Create Invoice.\",\n    };\n  }\n\n  revalidatePath(\"/dashboard/invoices\");\n  redirect(\"/dashboard/invoices\");\n}\n\nconst UpdateInvoice = FormSchema.omit({ id: true, date: true });\n\nexport async function updateInvoice(id: string, formData: FormData) {\n  const { customerId, amount, status } = UpdateInvoice.parse({\n    customerId: formData.get(\"customerId\"),\n    amount: formData.get(\"amount\"),\n    status: formData.get(\"status\"),\n  });\n\n  const amountInCents = amount * 100;\n\n  try {\n    await sql`\n    UPDATE invoices\n    SET customer_id = ${customerId}, amount = ${amountInCents}, status = ${status}\n    WHERE id = ${id}\n  `;\n  } catch (error) {\n    console.error(error);\n  }\n\n  revalidatePath(\"/dashboard/invoices\");\n  redirect(\"/dashboard/invoices\");\n}\n\nexport async function deleteInvoice(id: string) {\n  await sql`\n  DELETE FROM invoices WHERE id = ${id}`;\n\n  revalidatePath(\"/dashboard/invoices\");\n}\n\nexport async function authenticate(\n  prevState: string | undefined,\n  formData: FormData\n) {\n  try {\n    await signIn(\"credentials\", formData);\n  } catch (error) {\n    if (error instanceof AuthError) {\n      switch (error.type) {\n        case \"CredentialsSignin\":\n          return \"Invalid credentials.\";\n\n        default:\n          return \"Something went wrong.\";\n      }\n    }\n    throw error;\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"sources":["file:///home/myam/project-SCDP/learn-next/fullstack-next/.next-internal/server/app/login/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {authenticate as '60a31a5ea35645a95a06abd59fe2306eaa232abdbf'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["file:///home/myam/project-SCDP/learn-next/fullstack-next/app/ui/infinity-logo.tsx"],"sourcesContent":["import { Infinity } from 'lucide-react';\nimport { lusitana } from '@/app/ui/fonts';\n\ntype Size = 'sm' | 'md' | 'lg' | 'xl';\n\nexport default function InfinityLogo({ size = 'md' }: { size?: Size }) {\n  \n  //   const sizeMap: Record<Size, { text: string; icon: string }> = {\n  //   sm: { text: 'text-[24px]', icon: 'h-6 w-6' },\n  //   md: { text: 'text-[40px]', icon: 'h-11 w-11' },\n  //   lg: { text: 'text-[60px]', icon: 'h-16 w-16' },\n  //   xl: { text: 'text-[80px]', icon: 'h-20 w-20' },\n  // };\n\n  //  const { text, icon } = sizeMap[size];\n\n  return (\n    <div\n      className={`${lusitana.className} flex flex-row items-center leading-none text-emerald-100`}\n    >\n      <Infinity className={`${icon}  text-emerald-100`} />\n      <p className={text}>Infinity</p>\n    </div>\n  );\n}\n\n\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;;;;AAIe,SAAS,aAAa,EAAE,OAAO,IAAI,EAAmB;IAEnE,oEAAoE;IACpE,kDAAkD;IAClD,oDAAoD;IACpD,oDAAoD;IACpD,oDAAoD;IACpD,KAAK;IAEL,yCAAyC;IAEzC,qBACE,6XAAC;QACC,WAAW,GAAG,+LAAQ,CAAC,SAAS,CAAC,yDAAyD,CAAC;;0BAE3F,6XAAC,0SAAQ;gBAAC,WAAW,GAAG,KAAK,kBAAkB,CAAC;;;;;;0BAChD,6XAAC;gBAAE,WAAW;0BAAM;;;;;;;;;;;;AAG1B","debugId":null}},
    {"offset": {"line": 395, "column": 0}, "map": {"version":3,"sources":["file:///home/myam/project-SCDP/learn-next/fullstack-next/app/ui/login-form.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/ui/login-form.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/ui/login-form.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;AACvE;;uCACe,IAAA,uZAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAyR,GACtT,uDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 408, "column": 0}, "map": {"version":3,"sources":["file:///home/myam/project-SCDP/learn-next/fullstack-next/app/ui/login-form.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/ui/login-form.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/ui/login-form.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;AACvE;;uCACe,IAAA,uZAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAqQ,GAClS,mCACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 421, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 429, "column": 0}, "map": {"version":3,"sources":["file:///home/myam/project-SCDP/learn-next/fullstack-next/app/login/page.tsx"],"sourcesContent":["import InfinityLogo from '@/app/ui/infinity-logo';\nimport LoginForm from '@/app/ui/login-form';\nimport { Suspense } from 'react';\n \nexport default function LoginPage() {\n  return (\n    <main className=\"flex items-center justify-center md:h-screen\">\n      <div className=\"relative mx-auto flex w-full max-w-[400px] flex-col space-y-2.5 p-4 md:-mt-32\">\n        <div className=\"flex h-20 w-full items-center rounded-lg bg-emerald-800 p-16 md:h-36\">\n          <div className=\"w-32 text-emerald-100 md:w-36\">\n            <InfinityLogo />\n          </div>\n        </div>\n        <Suspense>\n          <LoginForm />\n        </Suspense>\n      </div>\n    </main>\n  );\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAEe,SAAS;IACtB,qBACE,6XAAC;QAAK,WAAU;kBACd,cAAA,6XAAC;YAAI,WAAU;;8BACb,6XAAC;oBAAI,WAAU;8BACb,cAAA,6XAAC;wBAAI,WAAU;kCACb,cAAA,6XAAC,yIAAY;;;;;;;;;;;;;;;8BAGjB,6XAAC,gWAAQ;8BACP,cAAA,6XAAC,sIAAS;;;;;;;;;;;;;;;;;;;;;AAKpB","debugId":null}}]
}