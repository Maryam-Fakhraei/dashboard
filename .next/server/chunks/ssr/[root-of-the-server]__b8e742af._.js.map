{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":["file:///home/myam/project-SCDP/learn-next/fullstack-next/app/ui/button.tsx"],"sourcesContent":["import clsx from \"clsx\";\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: React.ReactNode;\n}\n\nexport function Button({ children, className, ...rest }: ButtonProps) {\n  return (\n    <button\n      {...rest}\n      className={clsx(\n        \"flex h-10 items-center justify-center rounded-lg bg-emerald-800 px-4 text-sm font-medium text-emerald-100 transition-colors hover:bg-emerald-600 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-emerald-600 active:bg-emerald-600 aria-disabled:cursor-not-allowed aria-disabled:opacity-50\",\n        className\n      )}\n    >\n      {children}\n    </button>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAMO,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,MAAmB;IAClE,qBACE,6XAAC;QACE,GAAG,IAAI;QACR,WAAW,IAAA,iMAAI,EACb,mVACA;kBAGD;;;;;;AAGP","debugId":null}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":["file:///home/myam/project-SCDP/learn-next/fullstack-next/app/lib/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { z } from \"zod\";\nimport { revalidatePath } from \"next/cache\";\nimport { redirect } from \"next/navigation\";\nimport postgres from \"postgres\";\n\nimport { signIn } from \"@/auth\";\nimport { AuthError } from \"next-auth\";\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: \"require\" });\n\nconst FormSchema = z.object({\n  id: z.string({\n    invalid_type_error: \"Please select a customer.\",\n  }),\n  customerId: z.string(),\n  amount: z.coerce\n    .number()\n    .gt(0, { message: \"Please enter an amount greater than $0.\" }),\n  status: z.enum([\"pending\", \"paid\"], {\n    invalid_type_error: \"Please select an invoice status.\",\n  }),\n  date: z.string(),\n});\n\nexport type State = {\n  errors?: {\n    customerId?: string[];\n    amount?: string[];\n    status?: string[];\n  };\n  message?: string | null;\n};\n\nconst CreateInvoice = FormSchema.omit({ id: true, date: true });\n\nexport async function createInvoice(prevState: State, formData: FormData) {\n  // const rawFormData = {\n  //   customerId: formData.get(\"customerId\"),\n  //   amount: formData.get(\"amount\"),\n  //   status: formData.get(\"status\"),\n  // };\n  // console.log(rawFormData);\n  // console.log(typeof rawFormData.amount);\n\n  const validatedFields = CreateInvoice.safeParse({\n    customerId: formData.get(\"customerId\"),\n    amount: formData.get(\"amount\"),\n    status: formData.get(\"status\"),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: \"Missing Fields. Failed to Create Invoice.\",\n    };\n  }\n  const { customerId, amount, status } = validatedFields.data;\n\n  // const { customerId, amount, status } = CreateInvoice.parse({\n  //   customerId: formData.get(\"customerId\"),\n  //   amount: formData.get(\"amount\"),\n  //   status: formData.get(\"status\"),\n  // });\n\n  const amountInCents = amount * 100; // Convert money to cents\n  const date = new Date().toISOString().split(\"T\")[0]; // YYYY-MM-DD\n\n  try {\n    await sql`\n      INSERT INTO invoices (customer_id, amount, status, date)\n      VALUES (${customerId}, ${amountInCents}, ${status}, ${date})\n    `;\n  } catch (error) {\n    // console.error(error);\n    return {\n      message: \"Database Error: Failed to Create Invoice.\",\n    };\n  }\n\n  revalidatePath(\"/dashboard/invoices\");\n  redirect(\"/dashboard/invoices\");\n}\n\nconst UpdateInvoice = FormSchema.omit({ id: true, date: true });\n\nexport async function updateInvoice(id: string, formData: FormData) {\n  const { customerId, amount, status } = UpdateInvoice.parse({\n    customerId: formData.get(\"customerId\"),\n    amount: formData.get(\"amount\"),\n    status: formData.get(\"status\"),\n  });\n\n  const amountInCents = amount * 100;\n\n  try {\n    await sql`\n    UPDATE invoices\n    SET customer_id = ${customerId}, amount = ${amountInCents}, status = ${status}\n    WHERE id = ${id}\n  `;\n  } catch (error) {\n    console.error(error);\n  }\n\n  revalidatePath(\"/dashboard/invoices\");\n  redirect(\"/dashboard/invoices\");\n}\n\nexport async function deleteInvoice(id: string) {\n  await sql`\n  DELETE FROM invoices WHERE id = ${id}`;\n\n  revalidatePath(\"/dashboard/invoices\");\n}\n\nexport async function authenticate(\n  prevState: string | undefined,\n  formData: FormData\n) {\n  try {\n    await signIn(\"credentials\", formData);\n  } catch (error) {\n    if (error instanceof AuthError) {\n      switch (error.type) {\n        case \"CredentialsSignin\":\n          return \"Invalid credentials.\";\n\n        default:\n          return \"Something went wrong.\";\n      }\n    }\n    throw error;\n  }\n}\n"],"names":[],"mappings":";;;;;;IAqHsB,eAAA,WAAA,GAAA,IAAA,8XAAA,EAAA,8CAAA,mXAAA,EAAA,KAAA,GAAA,yXAAA,EAAA","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///home/myam/project-SCDP/learn-next/fullstack-next/app/ui/login-form.tsx"],"sourcesContent":["\"use client\";\n\n// import { lusitana } from \"@/app/ui/fonts\";\nimport {\n  AtSymbolIcon,\n  KeyIcon,\n  ExclamationCircleIcon,\n} from \"@heroicons/react/24/outline\";\nimport { ArrowRightIcon } from \"@heroicons/react/20/solid\";\nimport { Button } from \"@/app/ui/button\";\nimport { useActionState } from \"react\";\nimport { authenticate } from \"@/app/lib/actions\";\nimport { useSearchParams } from \"next/navigation\";\n\nexport default function LoginForm() {\n  const searchParams = useSearchParams();\n  const callbackUrl = searchParams.get(\"callbackUrl\") || \"/dashboard\";\n  const [errorMessage, formAction, isPending] = useActionState(\n    authenticate,\n    undefined\n  );\n\n  return (\n    <form action={formAction} className=\"space-y-3\">\n      <div className=\"flex-1 rounded-lg bg-stone-50 px-6 pb-4 pt-8\">\n        <h1 className={` mb-3 text-2xl text-emerald-900 px-8`}>\n          Please log in to continue.\n        </h1>\n        <div className=\"w-full\">\n          <div>\n            <label\n              className=\"mb-3 mt-5 block text-xs font-medium text-emerald-900\"\n              htmlFor=\"email\"\n            >\n              Email\n            </label>\n            <div className=\"relative\">\n              <input\n                className=\"peer block w-full rounded-md border border-stone-300 py-[9px] pl-10 text-sm placeholder:text-stone-500 focus:outline-none focus:ring-1 focus:ring-emerald-300 focus:border-emerald-300\"\n                id=\"email\"\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Enter your email address\"\n                required\n              />\n              <AtSymbolIcon className=\"pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500 peer-focus:text-gray-900\" />\n            </div>\n          </div>\n          <div className=\"mt-4\">\n            <label\n              className=\"mb-3 mt-5 block text-xs font-medium text-emerald-900\"\n              htmlFor=\"password\"\n            >\n              Password\n            </label>\n            <div className=\"relative\">\n              <input\n                className=\"peer block w-full rounded-md border border-stone-300 py-[9px] pl-10 text-sm placeholder:text-stone-500 focus:outline-none focus:ring-1 focus:ring-emerald-300 focus:border-emerald-300\"\n                id=\"password\"\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"Enter password\"\n                required\n                minLength={6}\n              />\n              <KeyIcon className=\"pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-stone-500 peer-focus:text-stone-800\" />\n            </div>\n          </div>\n        </div>\n        <input type=\"hidden\" name=\"redirectTo\" value={callbackUrl} />\n        <Button className=\"mt-8 w-full\" aria-disabled={isPending}>\n          Log in <ArrowRightIcon className=\"ml-1 h-5 w-5 text-emerald-100\" />\n        </Button>\n        <div\n          className=\"flex h-8 items-end space-x-1\"\n          aria-live=\"polite\"\n          aria-atomic=\"true\"\n        >\n          {errorMessage && (\n            <>\n              <ExclamationCircleIcon className=\"h-5 w-5 text-red-500\" />\n              <p className=\"text-sm text-red-500\">{errorMessage}</p>\n            </>\n          )}\n        </div>\n      </div>\n    </form>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA,6CAA6C;AAC7C;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAZA;;;;;;;;AAce,SAAS;IACtB,MAAM,eAAe,IAAA,oSAAe;IACpC,MAAM,cAAc,aAAa,GAAG,CAAC,kBAAkB;IACvD,MAAM,CAAC,cAAc,YAAY,UAAU,GAAG,IAAA,sWAAc,EAC1D,kKAAY,EACZ;IAGF,qBACE,6XAAC;QAAK,QAAQ;QAAY,WAAU;kBAClC,cAAA,6XAAC;YAAI,WAAU;;8BACb,6XAAC;oBAAG,WAAW,CAAC,oCAAoC,CAAC;8BAAE;;;;;;8BAGvD,6XAAC;oBAAI,WAAU;;sCACb,6XAAC;;8CACC,6XAAC;oCACC,WAAU;oCACV,SAAQ;8CACT;;;;;;8CAGD,6XAAC;oCAAI,WAAU;;sDACb,6XAAC;4CACC,WAAU;4CACV,IAAG;4CACH,MAAK;4CACL,MAAK;4CACL,aAAY;4CACZ,QAAQ;;;;;;sDAEV,6XAAC,8TAAY;4CAAC,WAAU;;;;;;;;;;;;;;;;;;sCAG5B,6XAAC;4BAAI,WAAU;;8CACb,6XAAC;oCACC,WAAU;oCACV,SAAQ;8CACT;;;;;;8CAGD,6XAAC;oCAAI,WAAU;;sDACb,6XAAC;4CACC,WAAU;4CACV,IAAG;4CACH,MAAK;4CACL,MAAK;4CACL,aAAY;4CACZ,QAAQ;4CACR,WAAW;;;;;;sDAEb,6XAAC,+SAAO;4CAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;;8BAIzB,6XAAC;oBAAM,MAAK;oBAAS,MAAK;oBAAa,OAAO;;;;;;8BAC9C,6XAAC,8HAAM;oBAAC,WAAU;oBAAc,iBAAe;;wBAAW;sCACjD,6XAAC,kUAAc;4BAAC,WAAU;;;;;;;;;;;;8BAEnC,6XAAC;oBACC,WAAU;oBACV,aAAU;oBACV,eAAY;8BAEX,8BACC;;0CACE,6XAAC,yVAAqB;gCAAC,WAAU;;;;;;0CACjC,6XAAC;gCAAE,WAAU;0CAAwB;;;;;;;;;;;;;;;;;;;;;;;;AAOnD","debugId":null}}]
}